Iterator Pattern
===============================

*The Iterator Pattern* provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.

Indications
-----
* You have objects in a collection the clients want to iterate over, but you don't want the clients to have access to the implementation.

Composite Pattern
===============================

*The Composite Pattern* allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.

Indications
-----
* You have collections of objects with whole-part relationships and you want to be able to treat those objects uniformly. Composites (nodes with children) and leaves (terminating nodes) have the same methods.

New OO Principles
-------------------
1. Single Responsibility Principle: A class should have only one reason to change.


Refactoring Steps
-----
* p. 324-5: The Diner and Pancake Houses agree on the MenuItem class...
* p. 326-7: ...but each has implemented the menu differently. The Pancake House uses ArrayList, and the Diner uses Array, and each have menu methods dependent on their own implementations. Note: C# ArrayList behaves differently from Java's (need to re-cast the generic objects in C#).
* p. 328: The Java-enabled waitress has a specification which can be achieved using the Iteration Pattern.
* p. 329: GetMenuItems() requires two loops. If another restaurant with a different implementation is acquired then we'll have _three_ loops.
* p. 331: Even with a for loop, Waitress still needs to know about the type of each menu. Need to decouple the Waitress from the concrete implementations of the menus completely.
* p. 332: Encapsulate what varies: in this case, that's the iteration over MenuItems.
* p. 333-5: Implenting the Iterator Pattern. Added Iterator interface and DinerMenuIterator.
* p. 336: Added CreateIterator() to DinerMenu. Did same updates for PancakeHouseMenu.
* p. 337: Reworked Waitress to use Iterator interface. For C#, need to explicitly cast (MenuItem) returned by Iterator.Next().
* p. 338: Test drive it.
* p. 339: Waitress is still bound to two concrete Menu classes...
* p. 341: HFDP switches to Java's Iterator interface. C# doesn't have anything that maps directly. Could use IEnumerator<MenuItem>, but I've decided it's not worth my bothering. Instead, added generic type to Iterator interface (Iterator<T>). Did not implement Remove().
* p. 351: Added CafeMenu. Used List<MenuItem> in CafeMenuIterator with help of LINQ.
* p. 359: Waitress's three calls to PrintMenu() looks ugly. Plus, adding a new menu will lead to violation of the Open Closed Principle. Time to fix this.
* p. 360: Decided to use IList and foreach for the menus collection, instead of create a new iterator. Jon Skeet offered a [rough-coded IIterator on StackOverflow](http://stackoverflow.com/a/1273050/249411), which provides a Java Iterator-type interface for C#.
* p. 360: Lost the names of the menus. May add to menus later.
* p. 361: Feature Request: Dessert menus! Need to add sub-menus.
* p. 362: The chef's implementation is limiting the flexibility. It is time to refactor the implementation.
* p. 363-4: Requirements:
	- Accomodate menus, sub-menus, and menu items (via a tree-shaped structure).
	- Can continue to conveniently traverse each item as the Iterator Pattern allows.
	- Can traverse flexibly, e.g. only the dessert menu or just the diner's menus.
	How do we handle these requirements? The Composite Pattern.
* p. 375: Great comments on this page. This design is a trade-off. It is trading the Single Responsibility Principle for transparency. Composites and leaf nodes become transparent to the client. "...you can always shift your perspective and see a leaf as a node with zero children." :-)
* p. 377: The Composite Iterator. Decided not to implement. Takes iterators and throws them on an internal stack to traverse the tree.
* p. 380: The Null Iterator: Another example of the Null Object "Design Pattern". Two choices for MenuItem's response to createIterator():
	# Return null. Requires client to handle.
	# Return an iterator that always returns false when hasNext() is called. Lazy--punts every time.


Lessons
-------
* Iterator Pattern gives a uniform way of accessing elements of aggregate objects, allowing polymorphic code.
* Iterator Pattern moves responsiblity of traversing elements from the aggregate object to the iterator object.
* Every responsibility of a class is an area of potential change. More than one responsibility means more than one area of change.
* Cohesion: Measure (high or low) of how closely a class or module supports a single purpose or responsibility.