Command Pattern
===============================

*The Command Pattern* 
The Command Pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue, or log requests, and support undoable operations.

Indications
-----
* There is a need to decouple the requester of an action from the object that actually performs the action.

New OO Principles
-------------------
1. None.

Refactoring Steps
-----
* p. 206: Basic elements for RemoteControlTest added: ICommand, SimpleRemoteControl, Light, and LightOnCommand.
* p. 207: Added GarageDoorOpenCommand.
* p. 211: remote control = invoker.
* p. 212-5: Implemented complex remote control and demo.
* p. 216: Updated NoCommand.
* p. 218-21: Adding undo functionality.
  * Add Undo() to ICommand.
  * Update LightOnCommand and LightOffCommand to implement Undo().
  * Create RemoteControlWithUndo.
  * Added Undo() to all existing commands.
  * Updated RemoteLoader to use undo.
* p. 222-5: Using state to implement Undo
  * Added speed to CeilingFan.
  * Added Undo() to CeilingFan commands.
  * Updated RemoteLoader.

Lessons
-------
* Pattern Honorable Mention: The NoCommand object is an example of a null object, which is useful when you don't have a meaningful object to return, and yet you want to remove from the client the responsibility for handling null. Sometimes Null Object is listed as a design pattern.