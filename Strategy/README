SimUDuck Strategy Pattern
================

*The Strategy Pattern* defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

Relevant OO Principles
-------------------
1. Encapsulate what varies.
2. Program to interfaces, not implementations.

Refactoring Steps
-----
* p. 3: Joe adds the flying duck behavior using inheritance (genius!).
* p. 4: FAIL: RubberDucks should not fly, so inheritance is not the answer.
* p. 6: Joe proposes a flying interface, but this means the flying behavior is not reusable, and needs to be maintained separately across every Duck subclass.
* p. 10: Need to pull the fly() and quack() methods (the behaviors that vary with each subclass) _out_ of the Duck class and into their own classes.
* p. 15: Add two instance variables for behaviors
* p. 15: Implement performQuack()
* p. 16-17
  * Set flyBehavior and quackBehavior instance variables
  * Set in constructor--not ideal because we are still programming to concrete implementationm, but this can be changed to dynamically assign different behavior at runtime)
* p. 20-21 Setting behavior dynamically
  * Add two new methods to the Duck class
  * Make a new duck type (ModelDuck)
  * Make a new FlyBehavior type (FlyRocketPowered)
  * Change the test class (MiniDuckSimulator), add the ModelDuck, and make the ModelDuck rocket-enabled.

Lessons
-------
* HAS-A (_composition_) can be better than IS-A (_inheritance_).