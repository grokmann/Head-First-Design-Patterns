State Pattern
===============================

*The State Pattern* allows an object to alter its behavior
when its internal state changes. The object will appear to
change its class.

Indications
-----
* A system has behavior that changes depending on conditions.
* You need the flexibility to add additional behaviors in the future.

New OO Principles
-------------------
1. ...


Refactoring Steps
-----
* p. 394: The initial code is very procedural/imperative.
* p. 402: Change request to add 1 in 10 winner of free gumball. 
* p. 404: "This code would make a FORTRAN programmer proud." ☺
* p. 405: Frank & Judy's plan:
	* Try to localize behavior for each state: "encapsulate what varies." 
	* Put each state's behavior in its own class—then each state can implement its own actions. 
	* Maybe Gumball Machine can delegate to the state object that represents the current state: "favor composition."
* p. 406: The New Design
	1. Define a State interface with a method for every action in the Gumball Machine.
	2. Implement a State class for every state, which will be responsible for behavior of machine when in the corresponding state.
	3. Get rid of conditional code and delegate work to State classes.
* p. 411: Complete GumballMachine class.
* p. 418: State Pattern definition and class diagram.
	* The Context is the class that can have a number of internal states, e.g. GumballMachine.
* p. 419: Class diagrams for the Strategy and State Patterns are the same. They vary in _intent_.
	* State Pattern
		- Set of behaviors encapsulated in state objects, which context delegates to.
		_ The client usually knows very little, if anything, about the state objects.
		- An alternative to putting lots of conditionals in your context.
	* Strategy Pattern
		- The client usually specifies the strategy object that the context is composed with.
		- While the pattern provides the flexibility to change the strategy at runtime, often there is a strategy object that is most appropriate for a context object.
		- A flexible alternative to subclassing.
* p. 420: Q&A
	* When the state transitions are fixed, they are appropriate for putting in the Context; when transitions are more dynamic, they are typically placed in state classes themselves. The creator is deciding which classess are closed for modification—the Context or the state classes—as the system evolves.
	* By using objects to manage state, you make states explicit and reduce the effort needed to understand and maintain your code.
* p. 422: Simple to add a new state: WinnerState.
* p. 422: By keeping WinnerState logic separate from SoldState, we adhere to the principle of "one class, one responsibility."
* p.425 Crucial questions:
	* Should we make State an abstract class to build in default behavior?
	* Dispense() method always called. We could make turnCrank() return a boolean (yay) or introduce exceptions (boo).
	* Move logic for state transitions to gumball machine?
	* Many gumball machine objects? May want to move state instances into static instance variables and share them.

Lessons
-------
* 