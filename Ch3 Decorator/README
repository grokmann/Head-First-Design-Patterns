Starbuzz Decorator Pattern
===============================

*The Decorator Pattern* 
The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.

New OO Principles
-------------------
1. Open-Closed Principle: Classes should be open for extension, but closed for modification.

Refactoring Steps
-----
* Skipped building a bad implementation... too much of a waste of effort. 8u)

Lessons
-------
* Be careful when choosing the areas of code that need to be extended; applying the Open-Closed Principle EVERYWHERE is wasteful and unnecessary, and can lead to complex, hard-to-understand code.
* Decorators mirror the super-type of the objects they decorate.
* The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job.