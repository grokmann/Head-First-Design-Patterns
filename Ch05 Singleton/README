Singleton Pattern
===============================

*The Singleton Pattern* 
The Singleton Pattern ensures a class has only one instance, and provides a global point of access to it.

Indications
-----
* You need to ensure one and only one instance of a class is created, at the time when you need it (lazy instantiation).

New OO Principles
-------------------
1. None.

Refactoring Steps
-----
* p. 175: Classic Singleton uses static method (GetInstance()) to act as gatekeeper to private constructor. Private instance variable (uniqueInstance) holds Singleton once it's created. This pattern has issues that will be addressed later.
* p. 177: Bad implementation of ChocolateBoiler.
* p. 178: Refactor ChocolateBoiler to use Singleton Pattern.
* p. 181-2: Multi-threading _can_ result in two separate instances. Adding lock (uniqueInstance) to body of GetInstance() will force every thread to wait its turn. Also added _volatile_ keyword to uniqueInstance. Keyword volatile is used as a hint to the compiler that this data member is accessed by multiple threads.
* p. 183 Performance hit: Locking is expensive, and is only relevant the first time we set the uniqueInstance variable to an instance. How to correct?
  * Do nothing if performance of GetInstance()
  * Move to an eagerly-created rather than lazily-created instance. uniqueInstance is set with static initializer, and it's automatically thread-safe.
  * Use "double-checked locking"

Lessons
-------
* C#'s and Java's implementation of the Singleton Pattern makes use of a private constructor, a static method combined with a static variable.
* Examine your performance and resource contraints, and carefully choose an appropriate Singleton implementation for multi-threaded applications.